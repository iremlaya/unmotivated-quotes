{"version":3,"sources":["config/fbConfig.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRefresh","console","log","chrome","tabs","reload","handleSubmit","addQuote","ref","db","collection","quotes","map","q","add","getUserData","firebase","firestore","get","then","snapshot","len","size","random","Math","floor","setState","quote","docs","data","isLoading","state","source","url","catch","err","initializeApp","text","displayName","backgroundImage","backgroundGradient","react_default","a","createElement","className","style","concat","onClick","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAkBeA,aAbF,CACTC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,wCC+FIC,qBAhGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqCRQ,cAAgB,WACdC,QAAQC,IAAI,cACZC,OAAOC,KAAKC,UAxCKZ,EA2CnBa,aAAe,WACbL,QAAQC,IAAI,eA5CKT,EA8CnBc,SAAW,WACT,IAAIC,EAAMf,EAAKgB,GAAGC,WAAW,UAC7BjB,EAAKkB,OAAOC,IAAI,SAACC,GAEfL,EAAIM,IAAID,MAlDOpB,EAqDnBsB,YAAc,WAEZC,IAASC,YAAYP,WAAW,UAAUQ,MACzCC,KAAK,SAACC,GACL,IAAIC,EAAMD,EAASE,KACfC,EAASC,KAAKC,MAAMD,KAAKD,UAAYF,EAAM,IAC/C5B,EAAKiC,SAAS,CACZC,MAAOP,EAASQ,KAAKL,GAAQM,OAAQC,WAAW,IAElD7B,QAAQC,IAAIT,EAAKsC,MAAMJ,MAAMK,OAAOC,OAEvCC,MAAM,SAACC,GACNlC,QAAQC,IAAI,0BAA2BiC,MA/DvCnB,IAASoB,cAAcrD,GACvBU,EAAKgB,GAAKO,IAASC,YAEnBxB,EAAKsC,MAAQ,CACXJ,MAAQ,GACRG,WAAW,GAEbrC,EAAKkB,OAAS,CACZ,CACE0B,KAAM,4CACNL,OAAQ,CACNM,YAAa,cACbL,IAAK,uFAEPM,gBAAiB,yIACjBC,mBAAoB,CAAC,UAAW,YAElC,CACEH,KAAM,eACNL,OAAQ,CACNM,YAAa,cACbL,IAAK,uFAEPM,gBAAiB,yIACjBC,mBAAoB,CAAC,UAAW,aA1BnB/C,mFA+BjBG,KAAKmB,+CAsCL,OACEnB,KAAKmC,MAAMD,UAAYW,EAAAC,EAAAC,cAAA,YACvBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAC1BN,gBAAe,OAAAO,OAASlD,KAAKmC,MAAMJ,MAAMY,gBAA1B,OAEfE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAQI,QAASnD,KAAKI,cAAe4C,UAAU,YAE/CH,EAAAC,EAAAC,cAAA,UAAQI,QAASnD,KAAKU,aAAcsC,UAAU,UAA9C,YAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZhD,KAAKmC,MAAMJ,MAAMU,MAEpBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGK,KAAMpD,KAAKmC,MAAMJ,MAAMK,OAAOC,KAAjC,IAAwCrC,KAAKmC,MAAMJ,MAAMK,OAAOM,wBAzF5DW,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/auth\"\r\n\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyD0a8Ss63c6omMG5whAhjmTD0MKG1DGM_k\",\r\n    authDomain: \"unmotivated-quotes.firebaseapp.com\",\r\n    databaseURL: \"https://unmotivated-quotes.firebaseio.com\",\r\n    projectId: \"unmotivated-quotes\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"755573370201\",\r\n    appId: \"1:755573370201:web:7308276c4e317f6d\"\r\n  };\r\n  // Initialize Firebase\r\n  //firebase.initializeApp(firebaseConfig); \r\n  //firebase.firestore().settings({timestampsInSnapshots: true})\r\n\r\nexport default config;","/* global chrome */\r\nimport React from 'react';\r\nimport './App.css';\r\nimport firebase from \"firebase/app\"\r\nimport config from \"./config/fbConfig\";\r\nimport \"firebase/firestore\"\r\nimport \"firebase/auth\"\r\nimport { DH_CHECK_P_NOT_PRIME } from 'constants';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    firebase.initializeApp(config); \r\n    this.db = firebase.firestore();\r\n    \r\n    this.state = {\r\n      quote:  {},\r\n      isLoading: true\r\n    }\r\n    this.quotes = [\r\n      {\r\n        text: 'The first step towards failure is trying.',\r\n        source: {\r\n          displayName: 'Gecko & Fly',\r\n          url: 'https://www.geckoandfly.com/18885/unmotivated-quotes-friends-enemies-overconfident/'\r\n        },\r\n        backgroundImage: 'https://images.unsplash.com/photo-1488426314888-94c9164df81d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2100&q=80',\r\n        backgroundGradient: ['#8a7967', '#caccd1']\r\n      },\r\n      {\r\n        text: 'Tsdbbksking.',\r\n        source: {\r\n          displayName: 'Gecko & Fly',\r\n          url: 'https://www.geckoandfly.com/18885/unmotivated-quotes-friends-enemies-overconfident/'\r\n        },\r\n        backgroundImage: 'https://images.unsplash.com/photo-1488426314888-94c9164df81d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2100&q=80',\r\n        backgroundGradient: ['#8a7967', '#caccd1']\r\n      },\r\n    ]\r\n  }\r\n  componentDidMount() {\r\n    this.getUserData();\r\n    \r\n    //this.addQuote();\r\n   \r\n\r\n  }\r\n\r\n  handleRefresh = () => {\r\n    console.log(\"Refreshed!\")\r\n    chrome.tabs.reload()\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    console.log(\"Submitted!\")\r\n  }\r\n  addQuote = () => {\r\n    let ref = this.db.collection(\"quotes\")\r\n    this.quotes.map((q) => {\r\n      \r\n      ref.add(q)\r\n    })\r\n  }\r\n  getUserData = () => {\r\n  \r\n    firebase.firestore().collection('quotes').get()\r\n    .then((snapshot) => {\r\n      let len = snapshot.size\r\n      let random = Math.floor(Math.random() * (len - 1));\r\n      this.setState({\r\n        quote: snapshot.docs[random].data(), isLoading: false\r\n      })\r\n      console.log(this.state.quote.source.url)\r\n  })\r\n  .catch((err) => {\r\n    console.log('Error getting documents', err);\r\n  });\r\n  }\r\n  render() {\r\n    return (\r\n      this.state.isLoading ? <div></div> : \r\n      <div className=\"App\" style={{\r\n        backgroundImage: `url(${this.state.quote.backgroundImage})`\r\n      }}>\r\n        <div className=\"container\">\r\n          <div className=\"header\">\r\n            <div className=\"right\">\r\n              <button onClick={this.handleRefresh} className=\"refresh\">\r\n              </button>\r\n              <button onClick={this.handleSubmit} className=\"submit\">Submit</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"quote-body\">\r\n            <div className=\"quote\">\r\n              {this.state.quote.text}\r\n            </div>\r\n            <div className=\"source\">\r\n              <a href={this.state.quote.source.url}>-{this.state.quote.source.displayName}</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}